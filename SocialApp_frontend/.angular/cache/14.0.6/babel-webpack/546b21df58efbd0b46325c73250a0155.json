{"ast":null,"code":"import _asyncToGenerator from \"C:/test/SocialApp_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n  }\n\n  isAccessAllowed(route, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Force the user to log in if currently unauthenticated.\n      if (!_this.authenticated) {\n        yield _this.keycloak.login({\n          redirectUri: window.location.origin + state.url\n        });\n      } // Get the roles required from the route.\n\n\n      const requiredRoles = route.data['role']; // Allow the user to proceed if no additional roles are required to access the route.\n\n      if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n        return true;\n      } // Allow the user to proceed if all the required roles are present.\n\n\n      return requiredRoles.every(role => _this.roles.includes(role));\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,SAASA,iBAAT,QAAmD,kBAAnD;;;;AAKA,OAAM,MAAOC,SAAP,SAAyBD,iBAAzB,CAA0C;EAC9CE,YAC8BC,MAD9B,EAEqBC,QAFrB,EAE8C;IAE5C,MAAMD,MAAN,EAAcC,QAAd;IAH4B;IACT;EAGpB;;EAEYC,eAAe,CAC1BC,KAD0B,EAE1BC,KAF0B,EAEA;IAAA;;IAAA;MAE1B;MACA,IAAI,CAAC,KAAI,CAACC,aAAV,EAAyB;QACvB,MAAM,KAAI,CAACJ,QAAL,CAAcK,KAAd,CAAoB;UACxBC,WAAW,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBN,KAAK,CAACO;QADpB,CAApB,CAAN;MAGD,CAPyB,CAS1B;;;MACA,MAAMC,aAAa,GAAGT,KAAK,CAACU,IAAN,CAAW,MAAX,CAAtB,CAV0B,CAY1B;;MACA,IAAI,EAAED,aAAa,YAAYE,KAA3B,KAAqCF,aAAa,CAACG,MAAd,KAAyB,CAAlE,EAAqE;QACnE,OAAO,IAAP;MACD,CAfyB,CAiB1B;;;MACA,OAAOH,aAAa,CAACI,KAAd,CAAqBC,IAAD,IAAU,KAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBF,IAApB,CAA9B,CAAP;IAlB0B;EAmB3B;;AA7B6C;;;mBAAnCnB,WAASsB;AAAA;;;SAATtB;EAASuB,SAATvB,SAAS;EAAAwB,YAFR","names":["KeycloakAuthGuard","AuthGuard","constructor","router","keycloak","isAccessAllowed","route","state","authenticated","login","redirectUri","window","location","origin","url","requiredRoles","data","Array","length","every","role","roles","includes","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\test\\SocialApp_front\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(\n    protected override readonly router: Router,\n    protected readonly keycloak: KeycloakService\n  ) {\n    super(router, keycloak);\n  }\n\n  public async isAccessAllowed(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ) {\n    // Force the user to log in if currently unauthenticated.\n    if (!this.authenticated) {\n      await this.keycloak.login({\n        redirectUri: window.location.origin + state.url\n      });\n    }\n\n    // Get the roles required from the route.\n    const requiredRoles = route.data['role'];\n\n    // Allow the user to proceed if no additional roles are required to access the route.\n    if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n      return true;\n    }\n\n    // Allow the user to proceed if all the required roles are present.\n    return requiredRoles.every((role) => this.roles.includes(role));\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\nfunction animationFramesFactory(timestampProvider) {\n  const {\n    schedule\n  } = animationFrameProvider;\n  return new Observable(subscriber => {\n    const subscription = new Subscription();\n    const provider = timestampProvider || performanceTimestampProvider;\n    const start = provider.now();\n\n    const run = timestamp => {\n      const now = provider.now();\n      subscriber.next({\n        timestamp: timestampProvider ? now : timestamp,\n        elapsed: now - start\n      });\n\n      if (!subscriber.closed) {\n        subscription.add(schedule(run));\n      }\n    };\n\n    subscription.add(schedule(run));\n    return subscription;\n  });\n}\n\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();","map":{"version":3,"names":["Observable","Subscription","performanceTimestampProvider","animationFrameProvider","animationFrames","timestampProvider","animationFramesFactory","DEFAULT_ANIMATION_FRAMES","schedule","subscriber","subscription","provider","start","now","run","timestamp","next","elapsed","closed","add"],"sources":["C:/Users/BELTARiT/Desktop/SocialApp/SocialApp_frontend/node_modules/rxjs/dist/esm/internal/observable/dom/animationFrames.js"],"sourcesContent":["import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n    const { schedule } = animationFrameProvider;\n    return new Observable((subscriber) => {\n        const subscription = new Subscription();\n        const provider = timestampProvider || performanceTimestampProvider;\n        const start = provider.now();\n        const run = (timestamp) => {\n            const now = provider.now();\n            subscriber.next({\n                timestamp: timestampProvider ? now : timestamp,\n                elapsed: now - start,\n            });\n            if (!subscriber.closed) {\n                subscription.add(schedule(run));\n            }\n        };\n        subscription.add(schedule(run));\n        return subscription;\n    });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,4BAAT,QAA6C,8CAA7C;AACA,SAASC,sBAAT,QAAuC,wCAAvC;AACA,OAAO,SAASC,eAAT,CAAyBC,iBAAzB,EAA4C;EAC/C,OAAOA,iBAAiB,GAAGC,sBAAsB,CAACD,iBAAD,CAAzB,GAA+CE,wBAAvE;AACH;;AACD,SAASD,sBAAT,CAAgCD,iBAAhC,EAAmD;EAC/C,MAAM;IAAEG;EAAF,IAAeL,sBAArB;EACA,OAAO,IAAIH,UAAJ,CAAgBS,UAAD,IAAgB;IAClC,MAAMC,YAAY,GAAG,IAAIT,YAAJ,EAArB;IACA,MAAMU,QAAQ,GAAGN,iBAAiB,IAAIH,4BAAtC;IACA,MAAMU,KAAK,GAAGD,QAAQ,CAACE,GAAT,EAAd;;IACA,MAAMC,GAAG,GAAIC,SAAD,IAAe;MACvB,MAAMF,GAAG,GAAGF,QAAQ,CAACE,GAAT,EAAZ;MACAJ,UAAU,CAACO,IAAX,CAAgB;QACZD,SAAS,EAAEV,iBAAiB,GAAGQ,GAAH,GAASE,SADzB;QAEZE,OAAO,EAAEJ,GAAG,GAAGD;MAFH,CAAhB;;MAIA,IAAI,CAACH,UAAU,CAACS,MAAhB,EAAwB;QACpBR,YAAY,CAACS,GAAb,CAAiBX,QAAQ,CAACM,GAAD,CAAzB;MACH;IACJ,CATD;;IAUAJ,YAAY,CAACS,GAAb,CAAiBX,QAAQ,CAACM,GAAD,CAAzB;IACA,OAAOJ,YAAP;EACH,CAhBM,CAAP;AAiBH;;AACD,MAAMH,wBAAwB,GAAGD,sBAAsB,EAAvD"},"metadata":{},"sourceType":"module"}